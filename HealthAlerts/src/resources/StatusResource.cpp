/**
 * Health Alerts
 * This application allows users to send and receive information about a user's health condition.
 *
 * OpenAPI spec version: 1.0
 * Contact: info@spilab.es
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "StatusResource.h"

#include "../models/User.h"

namespace org {
namespace openapitools {
namespace server {
namespace src {
namespace resources {

using namespace org::openapitools::server::src::models;

    StatusResource::StatusResource(MqttService *_mqttService) {
        mqttService = _mqttService;
    };

    void StatusResource::getBodyTemperature (int &sender) {
        // TODO Mocked response
        Serial.println("Method: getBodyTemperature");
        // Generate random value
        float randomTemp = ((float)rand() / RAND_MAX) * (37.50 - 36.00) + 36.00;

        // Convert to string
        char temperature[6];
        dtostrf(randomTemp,5,2,temperature);

        // Build and sends the json
        char *head = "{\"temperature\": ";
        char *tail = "}";
        char res[30];
        strcpy(res, head);
        strcat(res, temperature);
        strcat(res, tail);

        mqttService->sendResponse(topicResponse,res);
        // additional response of type const char* :     mqttService->sendResponse(topicResponse,"404 Not found response");
    }

    void StatusResource::getTemperature (int &sender) {
        // TODO Mocked response
        Serial.println("Method: getTemperature");

        // Read temperature
        float tmp = dht12.readTemperature();

        Serial.println(tmp);

        // Convert to string
        char temperature[6];
        dtostrf(tmp,5,2,temperature);

        // Build and sends the json
        char *head = "{\"temperature\": ";
        char *tail = "}";
        char res[30];
        strcpy(res, head);
        strcat(res, temperature);
        strcat(res, tail);

        Serial.println(res);

        mqttService->sendResponse(topicResponse,res);
        // additional response of type const char* :     mqttService->sendResponse("mytopic/testResponse","404 Not found response");
    }
    void StatusResource::getUser (int &sender) {
        // TODO Mocked response
        Serial.println("Method: getUser");
        
        User res = User("05461A54","84 years old. Male. Lives alone.");
        mqttService->sendResponse(topicResponse, (char*) JsonUtil::serializeUser(res));
        // additional response of type const char* :     mqttService->sendResponse("mytopic/testResponse","404 Not found response");
    }

}
}
}
}
}

